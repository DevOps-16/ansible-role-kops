apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  creationTimestamp: null
  name: {{ cluster.name }}
spec:
  api:
    loadBalancer:
      type: Public
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{ cluster.s3_bucket_name }}/{{ cluster.name }}
  docker:
    insecureRegistry: 100.64.0.0/10
    logDriver: ""
{% if 'kube_api_server' in cluster %}
  kubeAPIServer: "{{ cluster.kube_api_server }}"
{% endif %}
  etcdClusters:
    - etcdMembers:
{# Start of var definition #}
{% set master_cnt = cluster.master.count if 'master' in cluster and 'count' in cluster.master else kops_default_master_count %}
{% set master_azs = cluster.master.az if 'master' in cluster and 'az' in cluster.master else kops_default_master_az %}
{# End of var definition #}
{# Loop as many times as master nodes have been defined #}
{% for n in range(0, master_cnt) %}
{# mod operation #}
{% set index = n % (master_azs | length) %}
{% set curr_az = master_azs[index] %}
{% set subnet = kops_private_subnets[curr_az] %}
      - instanceGroup: master-{{ subnet.az }}
        name: {{ curr_az }}-{{ n }}
{% endfor %}
      name: main
    - etcdMembers:
{# Loop as many times as master nodes have been defined #}
{% for n in range(0, master_cnt) %}
{# mod operation #}
{% set index = n % (master_azs | length) %}
{% set curr_az = master_azs[index] %}
{% set subnet = kops_private_subnets[curr_az] %}
      - instanceGroup: master-{{ subnet.az }}
        name: {{ curr_az }}-{{ n }}
{% endfor %}
      name: events
  iam:
    allowContainerRegistry: true
    legacy: false
  kubernetesApiAccess:
{% for ip in cluster.api_access | default(kops_default_api_access) %}
    - {{ ip }}
{% endfor %}
  kubernetesVersion: {{ cluster.version | default(kops_default_version) }}
  masterPublicName: {{ cluster.masterPublicName | default('api.' + cluster.name) }}
  networkCIDR: {{ kops_vpc_cidr }}
  networkID: {{ kops_vpc_id }}
  networking:
    # https://github.com/kubernetes/kops/blob/master/docs/networking.md#enable-cross-subnet-mode-in-calico-aws-only
    #calico: {}
    calico:
      crossSubnet: true
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
{% for ip in cluster.ssh_access | default(kops_default_ssh_access) %}
    - {{ ip }}
{% endfor %}
  subnets:
{% for subnet in (kops_private_subnets.keys() | sort) %}
    - cidr: {{ kops_private_subnets[subnet].cidr }}
      id: {{ kops_private_subnets[subnet].id }}
      {# The NAT GW ID is taken from the public subnets equivilants -#}
      egress: {{ kops_utility_subnets[subnet].nat_id }}
      name: {{ kops_private_subnets[subnet].az }}
      type: Private
      zone: {{ kops_private_subnets[subnet].az }}
{% endfor %}
{% for subnet in (kops_utility_subnets.keys() | sort) %}
    - cidr: {{ kops_utility_subnets[subnet].cidr }}
      id: {{ kops_utility_subnets[subnet].id }}
      name: utility-{{ kops_utility_subnets[subnet].az }}
      type: Utility
      zone: {{ kops_utility_subnets[subnet].az }}
{% endfor %}
  topology:
#    bastion:
#      bastionPublicName: bastion.{{ cluster.name }}
    dns:
      type: Public
    masters: private
    nodes: private
