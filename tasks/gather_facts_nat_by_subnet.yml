---

- set_fact:
    kops_subnet_private_nat_filters:
      - key: vpc-id
        val: "{{ kops_vpc_id }}"
      - key: subnet-id
        val: "{{ subnet.id }}"
        #      - key: "tag:Name"
        #        val: "{{ cluster.region | default(kops_default_region) }}?.{{ cluster.name }}"
        #      - key: "tag:SubnetType"
        #        val: Private
        #      - key: "tag:kubernetes.io/cluster/{{ default_kops_cluster_name }}"
        #        val: shared
        #      - key: "tag:kubernetes.io/role/internal-elb"
        #        val: "1"




- name: gather nat gateway by filter
  ec2_vpc_nat_gateway_facts:
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ kops_aws_profile | default(omit) }}"
    region: "{{ cluster.region | default(kops_default_region) }}"
    filters: "{{ kops_subnet_private_nat_filters | get_attr('key', 'val') }}"
    #filters: "{}"
  register: _kops_nat_gw

- name: fail if not exactly one NAT gateway was found by filter
  assert:
    that:
      - _kops_nat_gw.result is defined
      - _kops_nat_gw.result | length == 1
    msg: Not exactly one NAT gateway has been found

- name: set mered subnet array gateway array
  set_fact:
    kops_private_subnets_nat: "{{ kops_private_subnets_nat | default([]) + [subnet | combine({'nat_id' : _kops_nat_gw.result[0]['nat_gateway_id']})] }}"
